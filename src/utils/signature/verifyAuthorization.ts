import type { Address } from 'abitype'

import type { ByteArray, Hex, Signature } from '../../types/misc.js'
import { type GetAddressErrorType, getAddress } from '../address/getAddress.js'
import {
  type IsAddressEqualErrorType,
  isAddressEqual,
} from '../address/isAddressEqual.js'
import type { ErrorType } from '../../errors/utils.js'
import {
  recoverAuthorizationAddress,
  type RecoverAuthorizationAddressErrorType,
} from './recoverAuthorizationAddress.js'
import type { Authorization } from '../../types/authorization.js'

export type VerifyAuthorizationParameters = {
  /** The address that signed the original message. */
  address: Address
  /** The authorization to be verified. */
  authorization: Authorization<false>
  /** The signature that was generated by signing the message with the address's private key. */
  signature: Hex | ByteArray | Signature
}

export type VerifyAuthorizationReturnType = boolean

export type VerifyAuthorizationErrorType =
  | IsAddressEqualErrorType
  | GetAddressErrorType
  | RecoverAuthorizationAddressErrorType
  | ErrorType

/**
 * Verify that an "authorization tuple" was signed by the provided address.
 *
 * - Docs {@link https://viem.sh/docs/utilities/verifyAuthorization}
 *
 * @param parameters - {@link VerifyAuthorizationParameters}
 * @returns Whether or not the signature is valid. {@link VerifyAuthorizationReturnType}
 */
export async function verifyAuthorization({
  address,
  authorization,
  signature,
}: VerifyAuthorizationParameters): Promise<VerifyAuthorizationReturnType> {
  return isAddressEqual(
    getAddress(address),
    await recoverAuthorizationAddress({ authorization, signature }),
  )
}
